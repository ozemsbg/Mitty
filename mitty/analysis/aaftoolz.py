"""Functions to process .aaf (Alignment Analysis Format) files """
import tempfile

import pysam
import cytoolz


@cytoolz.curry
def save_as_aaf(seq_dict, output_dir, titer):
  """Iterate over all the reads saving them as an Alignment Analysis Format file.

  This tab delimited file has the following fields:

  chrom pos d_err MQ  variantlist

  variantlist is a semicolon separated, spaceless list of variant sizes that looks like
  -1;+2;+1...

  :param seq_dict: converts reference_id to sequence_name including unmapped ones
  :param output_dir:
  :param titer:
  :return: output file name (generated by )

  NOTES:
    1. This expects qnames to be parsed and d_err to be computed
    2. The output is a temp file written to the given directory. This is to enable us
       to use it with parallel processing. The output file names are returned to us
       and we can combine them as we wish to create the final file
    3. It is wasteful to pair reads for this operation - the output file will be
       resorted in order to make use of tabix indexing

  """
  f, aaf_fname = tempfile.mkstemp(prefix='aaf-', dir=output_dir)

  with open(aaf_fname, 'w') as fp:
    for template in titer:
      for mate in template:
        rd, ri, d_err = mate['read'], mate['read_info'], mate['d_err']
        fp.write('{chrom}\t{pos}\t{d_err}\t{mq}\t{vl}\n'.
                 format(chrom=seq_dict[rd.reference_id], pos=rd.pos,
                        d_err=d_err, mq=rd.mapping_quality,
                        vl=';'.join(str(v) for v in ri.v_list)))

  return aaf_fname